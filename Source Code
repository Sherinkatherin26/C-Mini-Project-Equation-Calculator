#include <stdio.h>
#include <math.h>
int main() {
    int degree;
    printf("Enter the degree of the equation (2 for quadratic, 3 for cubic): ");
    scanf("%d",&degree);
    if (degree==2) {
        float  discriminant,root1,root2,realPart,imaginaryPart;
        int coeff[2+1];  
    int quotient[2];   
    int divisor,remainder;
    float root;
    printf("Enter the coefficients of the polynomial (highest to lowest degree):\n");
    for (int i=0;i<=2;i++) {
        printf("Coefficient of x^%d: ",2-i);
        scanf("%d",&coeff[i]);
    }
    if (coeff[0]==0) {
        printf("This is not a quadratic equation.\n");
    } else{
        discriminant=coeff[1]*coeff[1]-4*coeff[0]*coeff[2];
        if (discriminant>0) {
            root1=(-coeff[1]+sqrt(discriminant))/(2*coeff[0]);
            root2=(-coeff[1]-sqrt(discriminant))/(2*coeff[0]);
            printf("Roots are real and distinct:\n");
            printf("Root 1=%.2f\n",root1);
            printf("Root 2=%.2f\n",root2);
        }else if(discriminant==0) {
            root1=root2=-coeff[1]/(2 * coeff[0]);
            printf("Roots are real and equal:\n");
            printf("Root 1= Root 2= %.2f\n",root1);
        }else{
            realPart=-coeff[1]/(2*coeff[0]);
            imaginaryPart= sqrt(-discriminant)/(2 * coeff[0]);
            printf("Roots are complex and conjugate:\n");
            printf("Root 1= %.2f+%.2fi\n",realPart, imaginaryPart);
            printf("Root 2=%.2f-%.2fi\n",realPart, imaginaryPart);
        }
    }
    } else if(degree==3){
        float discriminant,root1,root2,realPart,imaginaryPart;
        int coeff[3+1];  
        int quotient[3];   
        int divisor, remainder;
        float root;
    printf("Enter the coefficients of the polynomial (highest to lowest degree):\n");
    for (int i=0;i<=3;i++) {
        printf("Coefficient of x^%d: ",3-i);
        scanf("%d",&coeff[i]);
    }
    if (coeff[0]==0) {
        printf("Not a cubic equation.\n");
        return 0;
    }
    double A =coeff[1]/coeff[0];
    double B =coeff[2]/coeff[0];
    double C =coeff[3]/coeff[0];
    double p=B-(A*A)/3.0;
    double q=(2.0*A*A*A)/27.0-(A*B)/3.0+C;
    double delta=(q*q)/4.0+(p*p*p)/27.0;
    printf("Depressed cubic: t^3+(%.2f)t+(%.2f)= 0\n",p,q);
    if (delta>0) {
        double u =cbrt(-q/2.0+sqrt(delta));
        double v =cbrt(-q /2.0-sqrt(delta));
        double t1=u+v;
        double realPart=-t1/2.0;
        double imaginaryPart=sqrt(3.0)*(u-v)/2.0;

        printf("Root 1(real):%.2f\n",t1-A/3.0);
        printf("Root 2(complex):%.2f+%.2fi\n",realPart-A/3.0,imaginaryPart);
        printf("Root 3(complex):%.2f-%.2fi\n",realPart-A/3.0,imaginaryPart);
    } else if (delta==0) {
        double u=cbrt(-q/2.0);
        double t1=2.0*u;
        double t2=-u;
        printf("Root 1(real, double): %.2f\n",t1-A/3.0);
        printf("Root 2(real): %.2f\n", t2-A/3.0);
    } else {
        double r=sqrt(-p*p*p/27.0);
        double phi=acos(-q/(2.0*r));
        double t1=2.0*cbrt(r)*cos(phi/3.0);
        double t2=2.0*cbrt(r)*cos((phi+2.0*M_PI)/3.0);
        double t3=2.0*cbrt(r)*cos((phi+4.0*M_PI)/3.0);
        printf("Root 1(real): %.2f\n",t1-A/3.0);
        printf("Root 2(real): %.2f\n",t2-A/3.0);
        printf("Root 3(real): %.2f\n",t3-A/3.0);
    }
    }
    return 0;
}
